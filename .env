 // password: (value: string): string => {
        //     if (!value) return 'Senha é obrigatória';
        //     if (value.length < 8) return 'Senha deve ter no mínimo 8 caracteres';
        //     if (value.length > 32) return 'Senha deve ter no máximo 32 caracteres';
        
        //     const allowedCharsRegex = /^[a-zA-Z0-9!@#$%^&*]+$/;
        //     if (!allowedCharsRegex.test(value)) {
        //         return 'Senha deve conter apenas letras, números e caracteres especiais (!@#$%^&*)';
        //     }
        
        //     if (!/[A-Z]/.test(value)) return 'Senha deve conter pelo menos uma letra maiúscula';
        //     if (!/[a-z]/.test(value)) return 'Senha deve conter pelo menos uma letra minúscula';
        //     if (!/[0-9]/.test(value)) return 'Senha deve conter pelo menos um número';
        //     if (!/[!@#$%^&*]/.test(value)) return 'Senha deve conter pelo menos um caractere especial (!@#$%^&*)';
        
        //     if (/(.)\1{2,}/.test(value)) {
        //         return 'Senha não pode conter três ou mais caracteres iguais em sequência';
        //     }
        
        //     return '';
        // },

        // confirmPassword: (value: string, password?: string): string => {
        //     if (!value) return 'Confirmação de senha é obrigatória';
        //     if (value !== password) return 'As senhas não coincidem';
        //     return '';
        // } SENHA VALIDADOR






nn sei oq faz 
           // const handleBlur = (field: keyof FormData) => () => {
    //     setTouched(prev => ({ ...prev, [field]: true }));
        
    //     const validationError = field === 'confirmPassword'
    //         ? validators[field](formData[field], formData.password)
    //         : validators[field](formData[field]);
        
    //     setErrors(prev => ({ ...prev, [field]: validationError }));
    // };

    // useEffect(() => {
    //     if (touched.confirmPassword) {
    //         const validationError = validators.confirmPassword(formData.confirmPassword, formData.password);
    //         setErrors(prev => ({ ...prev, confirmPassword: validationError }));
    //     }
    // }, [formData.password, touched.confirmPassword, formData.confirmPassword]);